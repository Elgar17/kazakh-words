// src/arabic/transformArabicToHapin.ts
var SpecialChar = /* @__PURE__ */ ((SpecialChar2) => {
  SpecialChar2["S1653"] = "\u0674\u0627";
  SpecialChar2["S1654"] = "\u0674\u0648";
  SpecialChar2["S1655"] = "\u0674\u06C7";
  SpecialChar2["S1656"] = "\u0674\u0649";
  return SpecialChar2;
})(SpecialChar || {});
var NormalChar = /* @__PURE__ */ ((NormalChar2) => {
  NormalChar2["C1548"] = ",";
  NormalChar2["C1563"] = ";";
  NormalChar2["C1567"] = "?";
  NormalChar2["C1569"] = "x";
  NormalChar2["C1575"] = "a";
  NormalChar2["C1576"] = "b";
  NormalChar2["C1578"] = "t";
  NormalChar2["C1580"] = "j";
  NormalChar2["C1581"] = "h";
  NormalChar2["C1583"] = "d";
  NormalChar2["C1585"] = "r";
  NormalChar2["C1586"] = "z";
  NormalChar2["C1587"] = "s";
  NormalChar2["C1588"] = "sh";
  NormalChar2["C1593"] = "gh";
  NormalChar2["C1600"] = "-";
  NormalChar2["C1601"] = "f";
  NormalChar2["C1602"] = "q";
  NormalChar2["C1603"] = "k";
  NormalChar2["C1604"] = "l";
  NormalChar2["C1605"] = "m";
  NormalChar2["C1606"] = "n";
  NormalChar2["C1608"] = "o";
  NormalChar2["C1609"] = "e";
  NormalChar2["C1610"] = "i";
  NormalChar2["C1652"] = "x";
  NormalChar2["C1662"] = "p";
  NormalChar2["C1670"] = "ch";
  NormalChar2["C1709"] = "ng";
  NormalChar2["C1711"] = "g";
  NormalChar2["C1726"] = "hh";
  NormalChar2["C1734"] = "v";
  NormalChar2["C1735"] = "u";
  NormalChar2["C1739"] = "w";
  NormalChar2["C1749"] = "ye";
  NormalChar2["SC1575"] = "xa";
  NormalChar2["SC1608"] = "xo";
  NormalChar2["SC1735"] = "xu";
  NormalChar2["SC1609"] = "xe";
  return NormalChar2;
})(NormalChar || {});
var VowelsID = [1575, 1608, 1735, 1609];
var handleSpecialCharacters = (word) => {
  return word.split("").map((i) => {
    const code = i.charCodeAt(0);
    if (code > 1652 && code < 1657) {
      return SpecialChar[`S${code}`];
    }
    return i;
  }).join("");
};
var HapinTransformer = class {
  constructor(word) {
    this._weakTone = false;
    this._word = "";
    this._index = 0;
    this._res = "";
    this.addSeparator = (easy) => {
      if (easy && this._index !== this._word.length - 1) {
        this._res += `'`;
      }
    };
    this.go = (easy) => {
      if (!this._word) {
        return "";
      }
      while (this._index < this._word.length) {
        const c = this._word[this._index].charCodeAt(0);
        if (this._word[this._index] === " ") {
          this.combineSpace();
          continue;
        }
        if ([1652, 1569].includes(c)) {
          this._weakTone = true;
          this._index++;
          continue;
        }
        if (VowelsID.includes(c)) {
          if (this._weakTone) {
            this._weakTone = false;
            this._res += NormalChar[`SC${c}`];
          } else {
            this._res += NormalChar[`C${c}`];
          }
          this.addSeparator(easy);
          this._index++;
          continue;
        }
        if (Object.keys(NormalChar).includes(`C${c}`)) {
          this._res += NormalChar[`C${c}`];
        } else {
          this._res += this._word[this._index];
        }
        this.addSeparator(easy);
        this._index++;
        continue;
      }
      return this._res;
    };
    this._word = word;
  }
  combineSpace() {
    this._res += " ";
    while (this._word[this._index + 1] === " ") {
      this._index++;
    }
    this._index++;
  }
};
var transformArabicToHapin = (o, easy = false) => {
  const array = o.split(/( +)/g).map((item) => item.trim()).filter((item) => !!item);
  const res = array.map((item) => {
    const tmp = handleSpecialCharacters(item);
    return new HapinTransformer(tmp).go(easy);
  }).join(" ");
  return res.replace(/(?=[\s])( +)(?=[\!\#-\/\:-\@])/g, "");
};

// src/utils.ts
var toLowerCase = (h) => {
  let _quoted = false;
  return h.split("").map((item) => {
    if (item === `"`) {
      _quoted = !_quoted;
      return item;
    }
    if (_quoted) {
      return item;
    } else {
      return item.toLowerCase();
    }
  }).join("");
};

// src/hapin/extend.ts
var HapinTransformer2 = class {
  constructor(word, scheme) {
    this._word = "";
    this._index = 0;
    this._res = "";
    this._scheme = "";
    this._hc = null;
    this.go = () => {
      if (!this._word || !this._hc) {
        return "";
      }
      while (this._index < this._word.length) {
        const c = this._word[this._index];
        const next = this._word[this._index + 1];
        if (c === " ") {
          this.combineSpace();
          continue;
        }
        if (c === `"`) {
          this.quoteWords();
          continue;
        }
        if (c === "s") {
          if (next === "h") {
            if (this._word[this._index + 2] === "s") {
              this.correct();
            } else {
              this._res += this._hc["sh"];
              this._index += 2;
            }
          } else {
            this._res += this._hc["s"];
            this._index++;
          }
          continue;
        }
        if (c === "g") {
          if (next === "h") {
            this._res += this._hc["gh"];
            this._index += 2;
          } else {
            this._res += this._hc["g"];
            this._index++;
          }
          continue;
        }
        if (c === "c") {
          if (next === "h") {
            this._res += this._hc["ch"];
            this._index += 2;
          } else {
            this._res += this._hc["t"] + this._hc["s"];
            this._index++;
          }
          continue;
        }
        if (c === "n") {
          if (next === "g") {
            this._res += this._hc["ng"];
            this._index += 2;
          } else {
            this._res += this._hc["n"];
            this._index++;
          }
          continue;
        }
        if (c === "h") {
          if (next === "h") {
            this._res += this._hc["hh"];
            this._index += 2;
          } else {
            this._res += this._hc["h"];
            this._index++;
          }
          continue;
        }
        if (c === "y") {
          if (next === "u") {
            this._res += this._hc["xu"];
            this._index += 2;
          } else if (next === "e") {
            this._res += this._hc["ye"];
            this._index += 2;
          } else if (next === "w") {
            this._res += this._hc["i"] + this._hc["w"];
            this._index += 2;
          } else if (next === "a") {
            this._res += this._hc["i"] + this._hc["a"];
            this._index += 2;
          } else if (next === "o") {
            this._res += this._hc["i"] + this._hc["o"];
            this._index += 2;
          } else {
            this._index++;
          }
          continue;
        }
        if (Object.keys(this._hc).includes(c)) {
          this._res += this._hc[c];
        } else {
          this._res += c;
        }
        this._index++;
        continue;
      }
      return this._res;
    };
    this._word = word;
    this._scheme = scheme[0];
    this._hc = scheme[1];
  }
  combineSpace() {
    this._res += " ";
    while (this._word[this._index + 1] === " ") {
      this._index++;
    }
    this._index++;
  }
  correct() {
    if (!this._hc) {
      return;
    }
    if (["ipa-cna"].includes(this._scheme)) {
      const n3 = this._word[this._index + 3];
      if (n3 === "h") {
        this._res += this._hc["shsh"];
        this._index += 4;
        return;
      } else {
        this._res += this._hc["sh"] + this._hc["s"];
        this._index += 3;
        return;
      }
    }
  }
  quoteWords() {
    const pos = this._word.indexOf('"', this._index + 1);
    if (pos !== -1) {
      this._res += `"${this._word.substring(this._index + 1, pos)}"`;
      this._index = pos + 1;
    } else {
      this._res += `"${this._word.substring(this._index + 1)}"`;
      this._index = this._word.length - 1;
    }
  }
};
var transformHapinToExtend = (h, scheme) => {
  if (!h) {
    return "";
  }
  const res = new HapinTransformer2(toLowerCase(h), scheme).go();
  return res.replace(/(?=[\s])( +)(?=[\!\#-\/\:-\@])/g, "");
};

// src/hapin/transformHapinToIPACNA.ts
var ipaCNAScheme = ["ipa-cna", {
  "a": "\u0251",
  "b": "b",
  "v": "v",
  "g": "\u0261",
  "d": "d",
  "ye": "e",
  "j": "d\u0292",
  "z": "z",
  "i": "j",
  "k": "k",
  "l": "l",
  "m": "m",
  "n": "n",
  "o": "o",
  "p": "p",
  "r": "r",
  "s": "s",
  "t": "t",
  "w": "w",
  "f": "f",
  "h": "x",
  "ch": "t\u0283",
  "sh": "\u0283",
  "shsh": "\u0283t\u0283",
  "e": "\u0259",
  "iw": "jw",
  "ia": "j\u0251",
  "io": "jo",
  "xe": "i",
  "gh": "\u0281",
  "q": "q",
  "ng": "\u014B",
  "xu": "\xF8",
  "u": "u",
  "hh": "h",
  "xa": "\xE6",
  "xo": "y"
}];
var transformHapinToIPA_CNA = (o) => {
  return transformHapinToExtend(o, ipaCNAScheme);
};

// src/arabic/transformArabicToIPACNA.ts
var transformArabicToIPA_CNA = (o) => {
  return transformHapinToIPA_CNA(transformArabicToHapin(o, false));
};

// src/cyrillic/extend.ts
var Tones = [1098, 1100];
var handleTones = (word) => {
  return word.split("").filter((item) => !Tones.includes(item.charCodeAt(0))).join("");
};
var HapinTransformer3 = class {
  constructor(word, CyrillicChar) {
    this._word = "";
    this._index = 0;
    this._res = "";
    this._cc = null;
    this.go = () => {
      if (!this._word || !this._cc) {
        return "";
      }
      while (this._index < this._word.length) {
        const c = this._word[this._index].charCodeAt(0);
        if (this._word[this._index] === " ") {
          this.combineSpace();
          continue;
        }
        if (this._word[this._index] === `"`) {
          this.quoteWords();
          continue;
        }
        if (Object.keys(this._cc).includes(`C${c}`)) {
          this._res += this._cc[`C${c}`];
        } else {
          this._res += this._word[this._index];
        }
        this._index++;
        continue;
      }
      return this._res;
    };
    this._word = word;
    this._cc = CyrillicChar;
  }
  combineSpace() {
    this._res += " ";
    while (this._word[this._index + 1] === " ") {
      this._index++;
    }
    this._index++;
  }
  quoteWords() {
    const pos = this._word.indexOf('"', this._index + 1);
    if (pos !== -1) {
      this._res += `"${this._word.substring(this._index + 1, pos)}"`;
      this._index = pos + 1;
    } else {
      this._res += `"${this._word.substring(this._index + 1)}"`;
      this._index = this._word.length - 1;
    }
  }
};
var transformCyrillicToExtend = (o, scheme) => {
  if (!o) {
    return "";
  }
  const res = new HapinTransformer3(handleTones(toLowerCase(o)), scheme[1]).go();
  return res.replace(/(?=[\s])( +)(?=[\!\#-\/\:-\@])/g, "");
};

// src/cyrillic/tranformCyrillicToHapin.ts
var hapinScheme = ["hapin", {
  "C1072": "a",
  "C1073": "b",
  "C1074": "v",
  "C1075": "g",
  "C1076": "d",
  "C1077": "ye",
  "C1078": "j",
  "C1079": "z",
  "C1080": "i",
  "C1081": "i",
  "C1082": "k",
  "C1083": "l",
  "C1084": "m",
  "C1085": "n",
  "C1086": "o",
  "C1087": "p",
  "C1088": "r",
  "C1089": "s",
  "C1090": "t",
  "C1091": "w",
  "C1092": "f",
  "C1093": "h",
  "C1094": "ts",
  "C1095": "ch",
  "C1096": "sh",
  "C1097": "shsh",
  "C1099": "e",
  "C1101": "ye",
  "C1102": "iw",
  "C1103": "ia",
  "C1105": "io",
  "C1110": "xe",
  "C1171": "gh",
  "C1179": "q",
  "C1187": "ng",
  "C1199": "xu",
  "C1201": "u",
  "C1211": "hh",
  "C1241": "xa",
  "C1257": "xo"
}];
var transformCyrillicToHapin = (o) => {
  return transformCyrillicToExtend(o, hapinScheme);
};

// src/hapin/transformHapinToArabic.ts
var HapinArabic = /* @__PURE__ */ ((HapinArabic2) => {
  HapinArabic2[","] = "\u060C";
  HapinArabic2[";"] = "\u061B";
  HapinArabic2["?"] = "\u061F";
  HapinArabic2["a"] = "\u0627";
  HapinArabic2["b"] = "\u0628";
  HapinArabic2["t"] = "\u062A";
  HapinArabic2["j"] = "\u062C";
  HapinArabic2["h"] = "\u062D";
  HapinArabic2["d"] = "\u062F";
  HapinArabic2["r"] = "\u0631";
  HapinArabic2["z"] = "\u0632";
  HapinArabic2["s"] = "\u0633";
  HapinArabic2["sh"] = "\u0634";
  HapinArabic2["gh"] = "\u0639";
  HapinArabic2["-"] = "\u0640";
  HapinArabic2["f"] = "\u0641";
  HapinArabic2["q"] = "\u0642";
  HapinArabic2["k"] = "\u0643";
  HapinArabic2["l"] = "\u0644";
  HapinArabic2["m"] = "\u0645";
  HapinArabic2["n"] = "\u0646";
  HapinArabic2["o"] = "\u0648";
  HapinArabic2["e"] = "\u0649";
  HapinArabic2["i"] = "\u064A";
  HapinArabic2["x"] = "\u0674";
  HapinArabic2["p"] = "\u067E";
  HapinArabic2["ch"] = "\u0686";
  HapinArabic2["ng"] = "\u06AD";
  HapinArabic2["g"] = "\u06AF";
  HapinArabic2["hh"] = "\u06BE";
  HapinArabic2["v"] = "\u06C6";
  HapinArabic2["u"] = "\u06C7";
  HapinArabic2["w"] = "\u06CB";
  HapinArabic2["ye"] = "\u06D5";
  return HapinArabic2;
})(HapinArabic || {});
var ArabicTransformer = class {
  constructor(word) {
    this._word = "";
    this._index = 0;
    this._res = "";
    this._omit = false;
    this._flag = [0, 0];
    this.omitTheWeakToneModification = () => {
      const tmp = this._word.substring(this._flag[0], this._flag[1]).replace(/([ng|gh])/g, "");
      if (/([k|g])/.test(tmp) || /ye/.test(tmp)) {
        this._omit = true;
      }
    };
    this.addWTM = () => {
      if (!this._omit && (this._res.length === 0 || this._res[0].charCodeAt(0) !== 1652)) {
        this._res = "\u0674" + this._res;
      }
      this._index++;
    };
    this.next = () => {
      return this._word[this._index + 1];
    };
    this.go = () => {
      if (!this._word) {
        return "";
      }
      this.searchNextFlag();
      this.omitTheWeakToneModification();
      while (this._index < this._word.length) {
        if (this._index > this._flag[1]) {
          this.searchNextFlag();
          this.omitTheWeakToneModification();
        }
        const c = this._word[this._index];
        const next = this.next();
        if (c === " ") {
          this.combineSpace();
          continue;
        }
        if (c === '"') {
          this.quoteWords();
          continue;
        }
        if (c === "x") {
          this.addWTM();
          continue;
        }
        if (c === "s") {
          if (next === "h") {
            this._res += "\u0634" /* sh */;
            this._index += 2;
          } else {
            this._res += "\u0633" /* s */;
            this._index++;
          }
          continue;
        }
        if (c === "g") {
          if (next === "h") {
            this._res += "\u0639" /* gh */;
            this._index += 2;
          } else {
            this._res += "\u06AF" /* g */;
            this._index++;
          }
          continue;
        }
        if (c === "c") {
          if (next === "h") {
            this._res += "\u0686" /* ch */;
            this._index += 2;
          } else {
            this._res += "\u062A" /* t */ + "\u0633" /* s */;
            this._index++;
          }
          continue;
        }
        if (c === "n") {
          if (next === "g") {
            this._res += "\u06AD" /* ng */;
            this._index += 2;
          } else {
            this._res += "\u0646" /* n */;
            this._index++;
          }
          continue;
        }
        if (c === "h") {
          if (next === "h") {
            this._res += "\u06BE" /* hh */;
            this._index += 2;
          } else {
            this._res += "\u062D" /* h */;
            this._index++;
          }
          continue;
        }
        if (c === "y") {
          if (next === "u") {
            this.addWTM();
          } else if (next === "e") {
            this._res += "\u06D5" /* ye */;
            this._index += 2;
          } else if (next === "w") {
            this._res += "\u064A" /* i */ + "\u06CB" /* w */;
            this._index += 2;
          } else if (next === "a") {
            this._res += "\u064A" /* i */ + "\u0627" /* a */;
            this._index += 2;
          } else if (next === "o") {
            this._res += "\u064A" /* i */ + "\u0648" /* o */;
            this._index += 2;
          } else {
            this._index++;
          }
          continue;
        }
        if (Object.keys(HapinArabic).includes(c)) {
          this._res += HapinArabic[c];
        } else {
          this._res += c;
        }
        this._index++;
        continue;
      }
      return this._res;
    };
    this._word = word;
  }
  combineSpace() {
    this._res += " ";
    while (this.next() === " ") {
      this._index++;
    }
    this._index++;
  }
  searchNextFlag() {
    const pos = this._word.indexOf(" ", this._index);
    const pos1 = this._word.indexOf('"', this._index);
    if (pos !== -1 && pos1 !== -1) {
      this._flag = [this._flag[1], Math.min(pos, pos1)];
    }
    if (pos === -1 && pos1 !== -1) {
      this._flag = [this._flag[1], pos1];
    }
    if (pos !== -1 && pos1 === -1) {
      this._flag = [this._flag[1], pos];
    }
    if (pos === -1 && pos1 === -1) {
      this._flag = [this._flag[1], this._word.length];
    }
  }
  quoteWords() {
    const pos = this._word.indexOf('"', this._index + 1);
    if (pos !== -1) {
      this._res += `"${this._word.substring(this._index + 1, pos)}"`;
      this._index = pos + 1;
    } else {
      this._res += `"${this._word.substring(this._index + 1)}"`;
      this._index = this._word.length - 1;
    }
  }
};
var transformHapinToArabic = (h) => {
  if (!h) {
    return "";
  }
  const res = new ArabicTransformer(toLowerCase(h)).go();
  return res.replace(/(?=[\s])( +)(?=[\!\#-\/\:-\@])/g, "");
};

// src/cyrillic/transformCyrillicToArabic.ts
var transformCyrillicToArabic = (o) => transformHapinToArabic(transformCyrillicToHapin(o));

// src/cyrillic/transformCyrillicToIPACNA.ts
var ipaCNAScheme2 = ["ipa-cna", {
  "C1072": "\u0251",
  "C1073": "b",
  "C1074": "v",
  "C1075": "\u0261",
  "C1076": "d",
  "C1077": "e",
  "C1078": "d\u0292",
  "C1079": "z",
  "C1080": "j",
  "C1081": "j",
  "C1082": "k",
  "C1083": "l",
  "C1084": "m",
  "C1085": "n",
  "C1086": "o",
  "C1087": "p",
  "C1088": "r",
  "C1089": "s",
  "C1090": "t",
  "C1091": "w",
  "C1092": "f",
  "C1093": "x",
  "C1094": "ts",
  "C1095": "t\u0283",
  "C1096": "\u0283",
  "C1097": "\u0283t\u0283",
  "C1099": "\u0259",
  "C1101": "e",
  "C1102": "jw",
  "C1103": "j\u0251",
  "C1105": "jo",
  "C1110": "i",
  "C1171": "\u0281",
  "C1179": "q",
  "C1187": "\u014B",
  "C1199": "\xF8",
  "C1201": "u",
  "C1211": "h",
  "C1241": "\xE6",
  "C1257": "y"
}];
var transformCyrillicToIPA_CNA = (o) => {
  return transformCyrillicToExtend(o, ipaCNAScheme2);
};
export {
  transformArabicToHapin,
  transformArabicToIPA_CNA,
  transformCyrillicToArabic,
  transformCyrillicToHapin,
  transformCyrillicToIPA_CNA,
  transformHapinToArabic,
  transformHapinToIPA_CNA
};
